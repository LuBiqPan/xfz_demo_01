function News(){}News.prototype.listenUploadFileEvent=function(){var o=$("#thumbnail-btn");o.change(function(){var e=o[0].files[0],n=new FormData;n.append("file",e),xfzajax.post({url:"/cms/upload_file/",data:n,processData:!1,contentType:!1,success:function(e){if(200===e.code){console.log(e.data);var n=e.data.url;$("#thumbnail-form").val(n)}}})})},News.prototype.listenUploadQiniuFileEvent=function(){var l=this;$("#thumbnail-btn").change(function(){var i=this.files[0];xfzajax.get({url:"/cms/qntoken/",success:function(e){if(200===e.code){var n=e.data.token,o=(new Date).getTime()+"."+i.name.split(".")[1],t={fname:o,params:{},mimeType:["image/png","image/jpeg","image/gif"]},a={userCdnDomain:!0,retryCount:6,region:qiniu.region.z0};qiniu.upload(i,o,n,t,a).subscribe({next:l.handleFileUploadProgress,error:l.handleFileUploadError,complete:l.handleFileUploadComplete})}}})})},News.prototype.handleFileUploadProgress=function(e){var n=e.total.percent;console.log(n)},News.prototype.handleFileUploadError=function(e){console.log(e)},News.prototype.handleFileUploadComplete=function(e){console.log(e)},News.prototype.run=function(){this.listenUploadQiniuFileEvent()},$(function(){(new News).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndyaXRlX25ld3MuanMiXSwibmFtZXMiOlsiTmV3cyIsInByb3RvdHlwZSIsImxpc3RlblVwbG9hZEZpbGVFdmVudCIsInVwbG9hZEJ0biIsIiQiLCJjaGFuZ2UiLCJmaWxlIiwiZmlsZXMiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwieGZ6YWpheCIsInBvc3QiLCJ1cmwiLCJkYXRhIiwicHJvY2Vzc0RhdGEiLCJjb250ZW50VHlwZSIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJjb25zb2xlIiwibG9nIiwidmFsIiwibGlzdGVuVXBsb2FkUWluaXVGaWxlRXZlbnQiLCJzZWxmIiwidGhpcyIsImdldCIsInRva2VuIiwia2V5IiwiRGF0ZSIsImdldFRpbWUiLCJuYW1lIiwic3BsaXQiLCJwdXRFeHRyYSIsImZuYW1lIiwicGFyYW1zIiwibWltZVR5cGUiLCJjb25maWciLCJ1c2VyQ2RuRG9tYWluIiwicmV0cnlDb3VudCIsInJlZ2lvbiIsInFpbml1IiwiejAiLCJ1cGxvYWQiLCJzdWJzY3JpYmUiLCJuZXh0IiwiaGFuZGxlRmlsZVVwbG9hZFByb2dyZXNzIiwiZXJyb3IiLCJoYW5kbGVGaWxlVXBsb2FkRXJyb3IiLCJjb21wbGV0ZSIsImhhbmRsZUZpbGVVcGxvYWRDb21wbGV0ZSIsInJlc3BvbnNlIiwicGVyY2VudCIsInRvdGFsIiwicnVuIl0sIm1hcHBpbmdzIjoiQUFDQSxTQUFTQSxRQUlUQSxLQUFLQyxVQUFVQyxzQkFBd0IsV0FDbkMsSUFDSUMsRUFBWUMsRUFBRSxrQkFDbEJELEVBQVVFLE9BQU8sV0FDYixJQUFJQyxFQUFPSCxFQUFVLEdBQUdJLE1BQU0sR0FDMUJDLEVBQVcsSUFBSUMsU0FDbkJELEVBQVNFLE9BQU8sT0FBUUosR0FDeEJLLFFBQVFDLEtBQUssQ0FDVEMsSUFBTyxvQkFDUEMsS0FBUU4sRUFDUk8sYUFBZSxFQUNmQyxhQUFlLEVBQ2ZDLFFBQVcsU0FBVUMsR0FDakIsR0FBdUIsTUFBbkJBLEVBQWEsS0FBVyxDQUN4QkMsUUFBUUMsSUFBSUYsRUFBYSxNQUN6QixJQUFJTCxFQUFNSyxFQUFhLEtBQU8sSUFDVGQsRUFBRSxtQkFDUmlCLElBQUlSLFVBT3ZDYixLQUFLQyxVQUFVcUIsMkJBQTZCLFdBQ3hDLElBQUlDLEVBQU9DLEtBQ0twQixFQUFFLGtCQUNSQyxPQUFPLFdBQ2IsSUFBSUMsRUFBT2tCLEtBQUtqQixNQUFNLEdBQ3RCSSxRQUFRYyxJQUFJLENBQ1JaLElBQU8sZ0JBQ1BJLFFBQVcsU0FBVUMsR0FDakIsR0FBdUIsTUFBbkJBLEVBQWEsS0FBVyxDQUN4QixJQUFJUSxFQUFRUixFQUFhLEtBQVMsTUFDOUJTLEdBQU0sSUFBS0MsTUFBUUMsVUFBWSxJQUFNdkIsRUFBS3dCLEtBQUtDLE1BQU0sS0FBSyxHQUMxREMsRUFBVyxDQUNYQyxNQUFPTixFQUNQTyxPQUFRLEdBQ1JDLFNBQVUsQ0FBQyxZQUFhLGFBQWMsY0FFdENDLEVBQVMsQ0FDVEMsZUFBZSxFQUNmQyxXQUFZLEVBQ1pDLE9BQVFDLE1BQU1ELE9BQU9FLElBRVJELE1BQU1FLE9BQU9wQyxFQUFNcUIsRUFBS0QsRUFBT00sRUFBVUksR0FDL0NPLFVBQVUsQ0FDakJDLEtBQVFyQixFQUFLc0IseUJBQ2JDLE1BQVN2QixFQUFLd0Isc0JBQ2RDLFNBQVl6QixFQUFLMEIsa0NBUXpDakQsS0FBS0MsVUFBVTRDLHlCQUEyQixTQUFVSyxHQUNoRCxJQUNJQyxFQURRRCxFQUFTRSxNQUNERCxRQUNwQmhDLFFBQVFDLElBQUkrQixJQUdoQm5ELEtBQUtDLFVBQVU4QyxzQkFBd0IsU0FBVUQsR0FDN0MzQixRQUFRQyxJQUFJMEIsSUFHaEI5QyxLQUFLQyxVQUFVZ0QseUJBQTJCLFNBQVVDLEdBQ2hEL0IsUUFBUUMsSUFBSThCLElBR2hCbEQsS0FBS0MsVUFBVW9ELElBQU0sV0FDTjdCLEtBRU5GLDhCQUdUbEIsRUFBRSxZQUNhLElBQUlKLE1BQ1ZxRCIsImZpbGUiOiJ3cml0ZV9uZXdzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5mdW5jdGlvbiBOZXdzKCl7XHJcblxyXG59XHJcblxyXG5OZXdzLnByb3RvdHlwZS5saXN0ZW5VcGxvYWRGaWxlRXZlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICB2YXIgdXBsb2FkQnRuID0gJChcIiN0aHVtYm5haWwtYnRuXCIpO1xyXG4gICAgdXBsb2FkQnRuLmNoYW5nZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGZpbGUgPSB1cGxvYWRCdG5bMF0uZmlsZXNbMF07XHJcbiAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwiZmlsZVwiLCBmaWxlKTtcclxuICAgICAgICB4ZnphamF4LnBvc3Qoe1xyXG4gICAgICAgICAgICBcInVybFwiOiBcIi9jbXMvdXBsb2FkX2ZpbGUvXCIsXHJcbiAgICAgICAgICAgIFwiZGF0YVwiOiBmb3JtRGF0YSxcclxuICAgICAgICAgICAgXCJwcm9jZXNzRGF0YVwiOiBmYWxzZSxcclxuICAgICAgICAgICAgXCJjb250ZW50VHlwZVwiOiBmYWxzZSxcclxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRbXCJjb2RlXCJdID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRbXCJkYXRhXCJdKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gcmVzdWx0W1wiZGF0YVwiXVtcInVybFwiXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGh1bWJuYWlsSW5wdXQgPSAkKFwiI3RodW1ibmFpbC1mb3JtXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbElucHV0LnZhbCh1cmwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbk5ld3MucHJvdG90eXBlLmxpc3RlblVwbG9hZFFpbml1RmlsZUV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdmFyIHVwbG9hZEJ0biA9ICQoXCIjdGh1bWJuYWlsLWJ0blwiKTtcclxuICAgIHVwbG9hZEJ0bi5jaGFuZ2UoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmaWxlID0gdGhpcy5maWxlc1swXTtcclxuICAgICAgICB4ZnphamF4LmdldCh7XHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiL2Ntcy9xbnRva2VuL1wiLFxyXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdFtcImNvZGVcIl0gPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IHJlc3VsdFtcImRhdGFcIl1bXCJ0b2tlblwiXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKSArIFwiLlwiICsgZmlsZS5uYW1lLnNwbGl0KFwiLlwiKVsxXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcHV0RXh0cmEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZuYW1lOiBrZXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczoge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbWVUeXBlOiBbXCJpbWFnZS9wbmdcIiwgXCJpbWFnZS9qcGVnXCIsIFwiaW1hZ2UvZ2lmXCJdXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyQ2RuRG9tYWluOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeUNvdW50OiA2LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpb246IHFpbml1LnJlZ2lvbi56MFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBxaW5pdS51cGxvYWQoZmlsZSwga2V5LCB0b2tlbiwgcHV0RXh0cmEsIGNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5zdWJzY3JpYmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5leHRcIjogc2VsZi5oYW5kbGVGaWxlVXBsb2FkUHJvZ3Jlc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXJyb3JcIjogc2VsZi5oYW5kbGVGaWxlVXBsb2FkRXJyb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tcGxldGVcIjogc2VsZi5oYW5kbGVGaWxlVXBsb2FkQ29tcGxldGVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5OZXdzLnByb3RvdHlwZS5oYW5kbGVGaWxlVXBsb2FkUHJvZ3Jlc3MgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgIHZhciB0b3RhbCA9IHJlc3BvbnNlLnRvdGFsO1xyXG4gICAgdmFyIHBlcmNlbnQgPSB0b3RhbC5wZXJjZW50O1xyXG4gICAgY29uc29sZS5sb2cocGVyY2VudCk7XHJcbn07XHJcblxyXG5OZXdzLnByb3RvdHlwZS5oYW5kbGVGaWxlVXBsb2FkRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxufTtcclxuXHJcbk5ld3MucHJvdG90eXBlLmhhbmRsZUZpbGVVcGxvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG59O1xyXG5cclxuTmV3cy5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgLy8gc2VsZi5saXN0ZW5VcGxvYWRGaWxlRXZlbnQoKTtcclxuICAgIHNlbGYubGlzdGVuVXBsb2FkUWluaXVGaWxlRXZlbnQoKTtcclxufTtcclxuXHJcbiQoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG5ld3MgPSBuZXcgTmV3cygpO1xyXG4gICAgbmV3cy5ydW4oKTtcclxufSk7Il19
