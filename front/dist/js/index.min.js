function Banner(){this.index=1,this.bannerWidth=798,this.bannerGroup=$("#banner-group"),this.leftArrow=$(".left-arrow"),this.rightArrow=$(".right-arrow"),this.bannerUl=$(".banner-ul"),this.pageControl=$(".page-control"),this.liList=this.bannerUl.children("li"),this.bannerCount=this.liList.length}function Index(){var n=this;n.page=2,n.category_id=0,n.loadMoreBtn=$("#load-more-btn")}Banner.prototype.initBanner=function(){var n=this,t=n.liList.eq(0).clone(),e=n.liList.eq(n.bannerCount-1).clone();n.bannerUl.append(t),n.bannerUl.prepend(e),n.bannerUl.css({width:n.bannerWidth*(n.bannerCount+2),left:-n.bannerWidth})},Banner.prototype.initPageControl=function(){for(var n=this,t=0;t<n.bannerCount;t++){var e=$("<li></li>");n.pageControl.append(e),0===t&&e.addClass("active"),n.pageControl.css({width:28*n.bannerCount})}},Banner.prototype.toggleArrow=function(n){var t=this;n?(t.leftArrow.show(),t.rightArrow.show()):(t.leftArrow.hide(),t.rightArrow.hide())},Banner.prototype.animate=function(){var n=this;n.bannerUl.stop().animate({left:-798*n.index},1e3);var t=n.index;0===t?t=n.bannerCount-1:t===n.bannerCount+1?t=0:t-=1,n.pageControl.children("li").eq(t).addClass("active").siblings().removeClass("active")},Banner.prototype.loop=function(){var n=this;this.timer=setInterval(function(){n.index>=n.bannerCount+1?(n.bannerUl.css({left:-n.bannerWidth}),n.index=2):n.index++,n.animate()},5e3)},Banner.prototype.listenArrowClick=function(){var n=this;n.leftArrow.click(function(){0===n.index?(n.bannerUl.css({left:-n.bannerCount*n.bannerWidth}),n.index=n.bannerCount-1):n.index--,n.animate()}),n.rightArrow.click(function(){n.index===n.bannerCount+1?(n.bannerUl.css({left:-n.bannerWidth}),n.index=2):n.index++,n.animate()})},Banner.prototype.listenBannerHover=function(){var n=this;this.bannerGroup.hover(function(){clearInterval(n.timer),n.toggleArrow(!0)},function(){n.loop(),n.toggleArrow(!1)})},Banner.prototype.listenPageControl=function(){var e=this;e.pageControl.children("li").each(function(n,t){$(t).click(function(){e.index=n+1,e.animate()})})},Banner.prototype.run=function(){this.initBanner(),this.initPageControl(),this.loop(),this.listenBannerHover(),this.listenArrowClick(),this.listenPageControl()},Index.prototype.listenLoadMoreEvent=function(){var i=this;i.loadMoreBtn.click(function(){xfzajax.get({url:"/news/list/",data:{p:i.page,category_id:i.category_id},success:function(n){if(200===n.code){var t=n.data;if(0<t.length){var e=template("news-item",{newses:t});$(".list-inner-group").append(e),i.page+=1}else i.loadMoreBtn.hide()}}})})},Index.prototype.listenCategorySwitchEvent=function(){var a=this;$(".list-tab").children().click(function(){var r=$(this),o=r.attr("data-category");xfzajax.get({url:"/news/list/",data:{category_id:o,p:1},success:function(n){if(200===n.code){var t=n.data,e=template("news-item",{newses:t}),i=$(".list-inner-group");i.empty(),i.append(e),a.page=2,a.category_id=o,r.addClass("active").siblings().removeClass("active"),a.loadMoreBtn.show()}}})})},Index.prototype.run=function(){this.listenLoadMoreEvent(),this.listenCategorySwitchEvent()},$(function(){var n=new Banner,t=new Index;n.run(),t.run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
