function FrontBase(){}function getCookie(t){var n=null;if(document.cookie&&""!==document.cookie)for(var e=document.cookie.split(";"),a=0;a<e.length;a++){var o=jQuery.trim(e[a]);if(o.substring(0,t.length+1)===t+"="){n=decodeURIComponent(o.substring(t.length+1));break}}return n}FrontBase.prototype.run=function(){this.listenAuthBoxHover()},FrontBase.prototype.listenAuthBoxHover=function(){var t=$(".auth-box"),n=$(".user-more-box");t.hover(function(){n.show()},function(){n.hide()})};var myajax={get:function(t){t.method="get",this.ajax(t)},post:function(t){t.method="post",this._ajaxSetup(),this.ajax(t)},ajax:function(t){$.ajax(t)},_ajaxSetup:function(){$.ajaxSetup({beforeSend:function(t,n){/^(GET|HEAD|OPTIONS|TRACE)$/.test(n.type)||this.crossDomain||t.setRequestHeader("X-CSRFToken",getCookie("csrftoken"))}})}};function Auth(){var t=this;t.maskWrapper=$(".mask-wrapper"),t.scrollWrapper=$(".scroll-wrapper"),t.smsCaptcha=$(".sms-captcha-btn")}Auth.prototype.run=function(){var t=this;t.listenShowHideEvent(),t.listenSwitchEvent(),t.listenSigninEvent(),t.listenSignupEvent(),t.listenImgCaptchaEvent(),t.listenSmsCaptchaEvent()},Auth.prototype.showEvent=function(){this.maskWrapper.show()},Auth.prototype.hideEvent=function(){this.maskWrapper.hide()},Auth.prototype.listenShowHideEvent=function(){var t=this,n=$(".signin-btn"),e=$(".signup-btn"),a=$(".close-btn");n.click(function(){t.showEvent(),t.scrollWrapper.css({left:0})}),e.click(function(){t.showEvent(),t.scrollWrapper.css({left:-400})}),a.click(function(){t.hideEvent()})},Auth.prototype.listenSwitchEvent=function(){var n=this;$(".switch").click(function(){var t=n.scrollWrapper.css("left");(t=parseInt(t))<0?n.scrollWrapper.animate({left:"0"}):n.scrollWrapper.animate({left:"-400px"})})},Auth.prototype.listenSigninEvent=function(){var t=$(".signin-group"),o=t.find("input[name='telephone']"),s=t.find("input[name='password']"),i=t.find("input[name='remember']");t.find(".submit-btn").click(function(t){t.preventDefault();var n=o.val(),e=s.val(),a=i.prop("checked");xfzajax.post({url:"/account/login/",data:{telephone:n,password:e,remember:a?1:0,csrfmiddlewaretoken:$("#csrf_token").val()},success:function(t){window.location.reload()}})})},Auth.prototype.listenSignupEvent=function(){var f=$(".signup-group");f.find(".submit-btn").click(function(t){t.preventDefault();var n=f.find("input[name='telephone']"),e=f.find("input[name='username']"),a=f.find("input[name='img_captcha']"),o=f.find("input[name='password1']"),s=f.find("input[name='password2']"),i=f.find("input[name='sms_captcha']"),c=n.val(),r=e.val(),p=a.val(),u=o.val(),l=s.val(),h=i.val();xfzajax.post({url:"/account/register/",data:{telephone:c,username:r,img_captcha:p,password1:u,password2:l,sms_captcha:h},success:function(t){200===t.code&&window.location.reload()},fail:function(t){window.messageBox.showError("Server internal error.")}})})},Auth.prototype.listenImgCaptchaEvent=function(){var t=$(".img-captcha");t.click(function(){t.attr("src","/account/img_captcha/?random="+Math.random())})},Auth.prototype.smsSuccessEvent=function(){var t=this;messageBox.showSuccess("短信验证码发送成功"),t.smsCaptcha.addClass("disabled");var n=30;t.smsCaptcha.unbind("click");var e=setInterval(function(){t.smsCaptcha.text(n+"s"),--n<=0&&(clearInterval(e),t.smsCaptcha.removeClass("disabled"),t.smsCaptcha.text("发送验证码"),t.listenSmsCaptchaEvent())},1e3)},Auth.prototype.listenSmsCaptchaEvent=function(){var n=this,t=$(".sms-captcha-btn"),e=$(".signup-group input[name='telephone']");t.click(function(){var t=e.val();t||messageBox.showInfo("Please type a telephone number."),xfzajax.get({url:"/account/sms_captcha/",data:{telephone:t},success:function(t){200==t.code&&n.smsSuccessEvent()},fail:function(t){console.log(t)}})})},$(function(){(new Auth).run()}),$(function(){(new FrontBase).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZyb250X2Jhc2UuanMiXSwibmFtZXMiOlsiRnJvbnRCYXNlIiwiZ2V0Q29va2llIiwibmFtZSIsImNvb2tpZVZhbHVlIiwiZG9jdW1lbnQiLCJjb29raWUiLCJjb29raWVzIiwic3BsaXQiLCJpIiwibGVuZ3RoIiwialF1ZXJ5IiwidHJpbSIsInN1YnN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsInByb3RvdHlwZSIsInJ1biIsInRoaXMiLCJsaXN0ZW5BdXRoQm94SG92ZXIiLCJhdXRoQm94IiwiJCIsInVzZXJNb3JlQm94IiwiaG92ZXIiLCJzaG93IiwiaGlkZSIsIm15YWpheCIsImdldCIsImFyZ3MiLCJhamF4IiwicG9zdCIsIl9hamF4U2V0dXAiLCJhamF4U2V0dXAiLCJiZWZvcmVTZW5kIiwieGhyIiwic2V0dGluZ3MiLCJ0ZXN0IiwidHlwZSIsImNyb3NzRG9tYWluIiwic2V0UmVxdWVzdEhlYWRlciIsIkF1dGgiLCJzZWxmIiwibWFza1dyYXBwZXIiLCJzY3JvbGxXcmFwcGVyIiwic21zQ2FwdGNoYSIsImxpc3RlblNob3dIaWRlRXZlbnQiLCJsaXN0ZW5Td2l0Y2hFdmVudCIsImxpc3RlblNpZ25pbkV2ZW50IiwibGlzdGVuU2lnbnVwRXZlbnQiLCJsaXN0ZW5JbWdDYXB0Y2hhRXZlbnQiLCJsaXN0ZW5TbXNDYXB0Y2hhRXZlbnQiLCJzaG93RXZlbnQiLCJoaWRlRXZlbnQiLCJzaWduaW5CdG4iLCJzaWdudXBCdG4iLCJjbG9zZUJ0biIsImNsaWNrIiwiY3NzIiwibGVmdCIsImN1cnJlbnRMZWZ0IiwicGFyc2VJbnQiLCJhbmltYXRlIiwic2lnbmluR3JvdXAiLCJ0ZWxlcGhvbmVJbnB1dCIsImZpbmQiLCJwYXNzd29yZElucHV0IiwicmVtZW1iZXJJbnB1dCIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJ0ZWxlcGhvbmUiLCJ2YWwiLCJwYXNzd29yZCIsInJlbWVtYmVyIiwicHJvcCIsInhmemFqYXgiLCJ1cmwiLCJkYXRhIiwiY3NyZm1pZGRsZXdhcmV0b2tlbiIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlbG9hZCIsInNpZ251cEdyb3VwIiwidXNlcm5hbWVJbnB1dCIsImltZ0NhcHRjaGFJbnB1dCIsInBhc3N3b3JkMUlucHV0IiwicGFzc3dvcmQySW5wdXQiLCJzbXNDYXB0Y2hhSW5wdXQiLCJ1c2VybmFtZSIsImltZ0NhcHRjaGEiLCJwYXNzd29yZDEiLCJwYXNzd29yZDIiLCJpbWdfY2FwdGNoYSIsInNtc19jYXB0Y2hhIiwiY29kZSIsImZhaWwiLCJlcnJvciIsIm1lc3NhZ2VCb3giLCJzaG93RXJyb3IiLCJhdHRyIiwiTWF0aCIsInJhbmRvbSIsInNtc1N1Y2Nlc3NFdmVudCIsInNob3dTdWNjZXNzIiwiYWRkQ2xhc3MiLCJjb3VudCIsInVuYmluZCIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJ0ZXh0IiwiY2xlYXJJbnRlcnZhbCIsInJlbW92ZUNsYXNzIiwic2hvd0luZm8iLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiQUFDQSxTQUFTQSxhQTBEVCxTQUFTQyxVQUFVQyxHQUNmLElBQUlDLEVBQWMsS0FDbEIsR0FBSUMsU0FBU0MsUUFBOEIsS0FBcEJELFNBQVNDLE9BRTVCLElBREEsSUFBSUMsRUFBVUYsU0FBU0MsT0FBT0UsTUFBTSxLQUMzQkMsRUFBSSxFQUFHQSxFQUFJRixFQUFRRyxPQUFRRCxJQUFLLENBQ3JDLElBQUlILEVBQVNLLE9BQU9DLEtBQUtMLEVBQVFFLElBRWpDLEdBQUlILEVBQU9PLFVBQVUsRUFBR1YsRUFBS08sT0FBUyxLQUFRUCxFQUFPLElBQU0sQ0FDdkRDLEVBQWNVLG1CQUFtQlIsRUFBT08sVUFBVVYsRUFBS08sT0FBUyxJQUNoRSxPQUlaLE9BQU9OLEVBbkVYSCxVQUFVYyxVQUFVQyxJQUFNLFdBQ1hDLEtBRU5DLHNCQUdUakIsVUFBVWMsVUFBVUcsbUJBQXFCLFdBQ3JDLElBQUlDLEVBQVVDLEVBQUUsYUFDWkMsRUFBY0QsRUFBRSxrQkFFcEJELEVB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bUNBRXhCdkMsUUFBUS9DLElBQUksQ0FDUmdELElBQU8sd0JBQ1BDLEtBQVEsQ0FDSlAsVUFBY0EsR0FFbEJTLFFBQVcsU0FBVUMsR0FDSyxLQUFsQkEsRUFBYSxNQUNidEMsRUFBSzhELG1CQUdiUCxLQUFRLFNBQVVDLEdBQ2RpQixRQUFRQyxJQUFJbEIsU0FNNUI1RSxFQUFFLFlBQ1ksSUFBSW1CLE1BQ1Z2QixRQUlSSSxFQUFFLFlBQ2tCLElBQUluQixXQUNWZSIsImZpbGUiOiJmcm9udF9iYXNlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5mdW5jdGlvbiBGcm9udEJhc2UoKSB7XHJcbiAgICBcclxufVxyXG5cclxuRnJvbnRCYXNlLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgc2VsZi5saXN0ZW5BdXRoQm94SG92ZXIoKTtcclxufTtcclxuXHJcbkZyb250QmFzZS5wcm90b3R5cGUubGlzdGVuQXV0aEJveEhvdmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGF1dGhCb3ggPSAkKFwiLmF1dGgtYm94XCIpO1xyXG4gICAgdmFyIHVzZXJNb3JlQm94ID0gJChcIi51c2VyLW1vcmUtYm94XCIpO1xyXG5cclxuICAgIGF1dGhCb3guaG92ZXIoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHVzZXJNb3JlQm94LnNob3coKTtcclxuICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB1c2VyTW9yZUJveC5oaWRlKCk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4vLyBPcGVuIC8gY2xvc2UgbG9naW4gcGFnZS5cclxuLy8gJChmdW5jdGlvbiAoKSB7XHJcbi8vICAgICAvLyBDbGljayBvbiBsb2dpbiBidXR0b24uXHJcbi8vICAgICAkKFwiI2J0blwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbi8vICAgICAgICAgJChcIi5tYXNrLXdyYXBwZXJcIikuc2hvdygpO1xyXG4vLyAgICAgfSk7XHJcbi8vXHJcbi8vICAgICAvLyBDbGljayBvbiBjbG9zZSBidXR0b24uXHJcbi8vICAgICAkKFwiLmNsb3NlLWJ0blwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbi8vICAgICAgICAgJChcIi5tYXNrLXdyYXBwZXJcIikuaGlkZSgpO1xyXG4vLyAgICAgfSk7XHJcbi8vIH0pO1xyXG5cclxuXHJcbi8vIExvZ2luIC8gcmVnaXN0ZXIgc3dpdGNoLlxyXG4vLyAkKGZ1bmN0aW9uICgpIHtcclxuLy8gICAgICQoXCIuc3dpdGNoXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuLy8gICAgICAgICB2YXIgc2Nyb2xsV3JhcHBlciA9ICQoXCIuc2Nyb2xsLXdyYXBwZXJcIik7XHJcbi8vICAgICAgICAgdmFyIGN1cnJlbnRMZWZ0ID0gc2Nyb2xsV3JhcHBlci5jc3MoXCJsZWZ0XCIpO1xyXG4vLyAgICAgICAgIC8vIFwibGVmdDogMTBweFwiIC0+IFwiMTBcIi5cclxuLy8gICAgICAgICBjdXJyZW50TGVmdCA9IHBhcnNlSW50KGN1cnJlbnRMZWZ0KTtcclxuLy9cclxuLy8gICAgICAgICBpZiAoY3VycmVudExlZnQgPCAwKSB7XHJcbi8vICAgICAgICAgICAgIHNjcm9sbFdyYXBwZXIuYW5pbWF0ZSh7XCJsZWZ0XCI6IFwiMFwifSlcclxuLy8gICAgICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICAgICAgICBzY3JvbGxXcmFwcGVyLmFuaW1hdGUoe1wibGVmdFwiOiBcIi00MDBweFwifSlcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9KTtcclxuLy8gfSk7XHJcblxyXG5cclxuXHJcbi8vY3NyZuiuvue9rlxyXG5mdW5jdGlvbiBnZXRDb29raWUobmFtZSkge1xyXG4gICAgdmFyIGNvb2tpZVZhbHVlID0gbnVsbDtcclxuICAgIGlmIChkb2N1bWVudC5jb29raWUgJiYgZG9jdW1lbnQuY29va2llICE9PSAnJykge1xyXG4gICAgICAgIHZhciBjb29raWVzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBjb29raWUgPSBqUXVlcnkudHJpbShjb29raWVzW2ldKTtcclxuICAgICAgICAgICAgLy8gRG9lcyB0aGlzIGNvb2tpZSBzdHJpbmcgYmVnaW4gd2l0aCB0aGUgbmFtZSB3ZSB3YW50P1xyXG4gICAgICAgICAgICBpZiAoY29va2llLnN1YnN0cmluZygwLCBuYW1lLmxlbmd0aCArIDEpID09PSAobmFtZSArICc9JykpIHtcclxuICAgICAgICAgICAgICAgIGNvb2tpZVZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcobmFtZS5sZW5ndGggKyAxKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjb29raWVWYWx1ZTtcclxufVxyXG5cclxudmFyIG15YWpheCA9IHtcclxuICAgICdnZXQnOiBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICAgIGFyZ3NbJ21ldGhvZCddID0gJ2dldCc7XHJcbiAgICAgICAgdGhpcy5hamF4KGFyZ3MpO1xyXG4gICAgfSxcclxuICAgICdwb3N0JzogZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgICAgICBhcmdzWydtZXRob2QnXSA9ICdwb3N0JztcclxuICAgICAgICB0aGlzLl9hamF4U2V0dXAoKTtcclxuICAgICAgICB0aGlzLmFqYXgoYXJncyk7XHJcbiAgICB9LFxyXG4gICAgJ2FqYXgnOiBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICAgICQuYWpheChhcmdzKTtcclxuICAgIH0sXHJcbiAgICAnX2FqYXhTZXR1cCc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkLmFqYXhTZXR1cCh7XHJcbiAgICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKHhociwgc2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIGlmICghL14oR0VUfEhFQUR8T1BUSU9OU3xUUkFDRSkkLy50ZXN0KHNldHRpbmdzLnR5cGUpICYmICF0aGlzLmNyb3NzRG9tYWluKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJYLUNTUkZUb2tlblwiLCBnZXRDb29raWUoJ2NzcmZ0b2tlbicpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLy8gQ29uc3RydWN0aW9uIGZ1bmN0aW9uLlxyXG5mdW5jdGlvbiBBdXRoKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHNlbGYubWFza1dyYXBwZXIgPSAkKFwiLm1hc2std3JhcHBlclwiKTtcclxuICAgIHNlbGYuc2Nyb2xsV3JhcHBlciA9ICQoXCIuc2Nyb2xsLXdyYXBwZXJcIik7XHJcbiAgICBzZWxmLnNtc0NhcHRjaGEgPSAkKFwiLnNtcy1jYXB0Y2hhLWJ0blwiKTtcclxufVxyXG5cclxuQXV0aC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHNlbGYubGlzdGVuU2hvd0hpZGVFdmVudCgpO1xyXG4gICAgc2VsZi5saXN0ZW5Td2l0Y2hFdmVudCgpO1xyXG4gICAgc2VsZi5saXN0ZW5TaWduaW5FdmVudCgpO1xyXG4gICAgc2VsZi5saXN0ZW5TaWdudXBFdmVudCgpO1xyXG4gICAgc2VsZi5saXN0ZW5JbWdDYXB0Y2hhRXZlbnQoKTtcclxuICAgIHNlbGYubGlzdGVuU21zQ2FwdGNoYUV2ZW50KCk7XHJcbn07XHJcblxyXG5BdXRoLnByb3RvdHlwZS5zaG93RXZlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAvLyBTaG93IHNpbmdpbi9zaWdudXAgd2luZG93LlxyXG4gICAgc2VsZi5tYXNrV3JhcHBlci5zaG93KCk7XHJcbn07XHJcblxyXG5BdXRoLnByb3RvdHlwZS5oaWRlRXZlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAvLyBIaWRlIHNpZ25pbi9zaWdudXAgd2luZG93LlxyXG4gICAgc2VsZi5tYXNrV3JhcHBlci5oaWRlKCk7XHJcbn07XHJcblxyXG5BdXRoLnByb3RvdHlwZS5saXN0ZW5TaG93SGlkZUV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdmFyIHNpZ25pbkJ0biA9ICQoXCIuc2lnbmluLWJ0blwiKTtcclxuICAgIHZhciBzaWdudXBCdG4gPSAkKFwiLnNpZ251cC1idG5cIik7XHJcbiAgICB2YXIgY2xvc2VCdG4gPSAkKFwiLmNsb3NlLWJ0blwiKTtcclxuXHJcbiAgICAvLyBDbGljayBzaWduaW4gYnV0dG9uIHRvIG9wZW4gc2lnbmluIHdpbmRvdy5cclxuICAgIHNpZ25pbkJ0bi5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VsZi5zaG93RXZlbnQoKTtcclxuICAgICAgICBzZWxmLnNjcm9sbFdyYXBwZXIuY3NzKHtcImxlZnRcIjogMH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ2xpY2sgc2lnbnVwIGJ1dHRvbiB0byBvcGVuIHNpZ251cCB3aW5kb3cuXHJcbiAgICBzaWdudXBCdG4uY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNlbGYuc2hvd0V2ZW50KCk7XHJcbiAgICAgICAgc2VsZi5zY3JvbGxXcmFwcGVyLmNzcyh7XCJsZWZ0XCI6IC00MDB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENsaWNrIGNsb3NlIGJ1dHRvbiB0byBjbG9zZSBzaWduaW4vc2lnbnVwIHdpbmRvdy5cclxuICAgIGNsb3NlQnRuLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzZWxmLmhpZGVFdmVudCgpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG4vLyBTaWduaW4vc2lnbnVwIHdpbmRvdyBzd2l0Y2guXHJcbkF1dGgucHJvdG90eXBlLmxpc3RlblN3aXRjaEV2ZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICB2YXIgc3dpdGNoZXIgPSAkKFwiLnN3aXRjaFwiKTtcclxuXHJcbiAgICBzd2l0Y2hlci5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRMZWZ0ID0gc2VsZi5zY3JvbGxXcmFwcGVyLmNzcyhcImxlZnRcIik7XHJcbiAgICAgICAgLy8gXCJsZWZ0OiAxMHB4XCIgLT4gXCIxMFwiLlxyXG4gICAgICAgIGN1cnJlbnRMZWZ0ID0gcGFyc2VJbnQoY3VycmVudExlZnQpO1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudExlZnQgPCAwKSB7XHJcbiAgICAgICAgICAgIHNlbGYuc2Nyb2xsV3JhcHBlci5hbmltYXRlKHtcImxlZnRcIjogXCIwXCJ9KVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNlbGYuc2Nyb2xsV3JhcHBlci5hbmltYXRlKHtcImxlZnRcIjogXCItNDAwcHhcIn0pXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG5BdXRoLnByb3RvdHlwZS5saXN0ZW5TaWduaW5FdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHZhciBzaWduaW5Hcm91cCA9ICQoXCIuc2lnbmluLWdyb3VwXCIpO1xyXG4gICAgdmFyIHRlbGVwaG9uZUlucHV0ID0gc2lnbmluR3JvdXAuZmluZChcImlucHV0W25hbWU9J3RlbGVwaG9uZSddXCIpO1xyXG4gICAgdmFyIHBhc3N3b3JkSW5wdXQgPSBzaWduaW5Hcm91cC5maW5kKFwiaW5wdXRbbmFtZT0ncGFzc3dvcmQnXVwiKTtcclxuICAgIHZhciByZW1lbWJlcklucHV0ID0gc2lnbmluR3JvdXAuZmluZChcImlucHV0W25hbWU9J3JlbWVtYmVyJ11cIik7XHJcblxyXG4gICAgdmFyIHN1Ym1pdEJ0biA9IHNpZ25pbkdyb3VwLmZpbmQoXCIuc3VibWl0LWJ0blwiKTtcclxuICAgIHN1Ym1pdEJ0bi5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHZhciB0ZWxlcGhvbmUgPSB0ZWxlcGhvbmVJbnB1dC52YWwoKTtcclxuICAgICAgICB2YXIgcGFzc3dvcmQgPSBwYXNzd29yZElucHV0LnZhbCgpO1xyXG4gICAgICAgIHZhciByZW1lbWJlciA9IHJlbWVtYmVySW5wdXQucHJvcChcImNoZWNrZWRcIik7XHJcblxyXG4gICAgICAgIHhmemFqYXgucG9zdCh7XHJcbiAgICAgICAgICAgICd1cmwnOiAnL2FjY291bnQvbG9naW4vJyxcclxuICAgICAgICAgICAgJ2RhdGEnOiB7XHJcbiAgICAgICAgICAgICAgICAndGVsZXBob25lJzogdGVsZXBob25lLFxyXG4gICAgICAgICAgICAgICAgJ3Bhc3N3b3JkJzogcGFzc3dvcmQsXHJcbiAgICAgICAgICAgICAgICAncmVtZW1iZXInOiByZW1lbWJlcj8xOjAsXHJcbiAgICAgICAgICAgICAgICAnY3NyZm1pZGRsZXdhcmV0b2tlbic6ICQoJyNjc3JmX3Rva2VuJykudmFsKClcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuQXV0aC5wcm90b3R5cGUubGlzdGVuU2lnbnVwRXZlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2lnbnVwR3JvdXAgPSAkKFwiLnNpZ251cC1ncm91cFwiKTtcclxuICAgIHZhciBzdWJtaXRCdG4gPSBzaWdudXBHcm91cC5maW5kKFwiLnN1Ym1pdC1idG5cIik7XHJcbiAgICBzdWJtaXRCdG4uY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB2YXIgdGVsZXBob25lSW5wdXQgPSBzaWdudXBHcm91cC5maW5kKFwiaW5wdXRbbmFtZT0ndGVsZXBob25lJ11cIik7XHJcbiAgICAgICAgdmFyIHVzZXJuYW1lSW5wdXQgPSBzaWdudXBHcm91cC5maW5kKFwiaW5wdXRbbmFtZT0ndXNlcm5hbWUnXVwiKTtcclxuICAgICAgICB2YXIgaW1nQ2FwdGNoYUlucHV0ID0gc2lnbnVwR3JvdXAuZmluZChcImlucHV0W25hbWU9J2ltZ19jYXB0Y2hhJ11cIik7XHJcbiAgICAgICAgdmFyIHBhc3N3b3JkMUlucHV0ID0gc2lnbnVwR3JvdXAuZmluZChcImlucHV0W25hbWU9J3Bhc3N3b3JkMSddXCIpO1xyXG4gICAgICAgIHZhciBwYXNzd29yZDJJbnB1dCA9IHNpZ251cEdyb3VwLmZpbmQoXCJpbnB1dFtuYW1lPSdwYXNzd29yZDInXVwiKTtcclxuICAgICAgICB2YXIgc21zQ2FwdGNoYUlucHV0ID0gc2lnbnVwR3JvdXAuZmluZChcImlucHV0W25hbWU9J3Ntc19jYXB0Y2hhJ11cIik7XHJcblxyXG4gICAgICAgIHZhciB0ZWxlcGhvbmUgPSB0ZWxlcGhvbmVJbnB1dC52YWwoKTtcclxuICAgICAgICB2YXIgdXNlcm5hbWUgPSB1c2VybmFtZUlucHV0LnZhbCgpO1xyXG4gICAgICAgIHZhciBpbWdDYXB0Y2hhID0gaW1nQ2FwdGNoYUlucHV0LnZhbCgpO1xyXG4gICAgICAgIHZhciBwYXNzd29yZDEgPSBwYXNzd29yZDFJbnB1dC52YWwoKTtcclxuICAgICAgICB2YXIgcGFzc3dvcmQyID0gcGFzc3dvcmQySW5wdXQudmFsKCk7XHJcbiAgICAgICAgdmFyIHNtc0NhcHRjaGEgPSBzbXNDYXB0Y2hhSW5wdXQudmFsKCk7XHJcblxyXG4gICAgICAgIHhmemFqYXgucG9zdCh7XHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiL2FjY291bnQvcmVnaXN0ZXIvXCIsXHJcbiAgICAgICAgICAgIFwiZGF0YVwiOiB7XHJcbiAgICAgICAgICAgICAgICBcInRlbGVwaG9uZVwiOiB0ZWxlcGhvbmUsXHJcbiAgICAgICAgICAgICAgICBcInVzZXJuYW1lXCI6IHVzZXJuYW1lLFxyXG4gICAgICAgICAgICAgICAgXCJpbWdfY2FwdGNoYVwiOiBpbWdDYXB0Y2hhLFxyXG4gICAgICAgICAgICAgICAgXCJwYXNzd29yZDFcIjogcGFzc3dvcmQxLFxyXG4gICAgICAgICAgICAgICAgXCJwYXNzd29yZDJcIjogcGFzc3dvcmQyLFxyXG4gICAgICAgICAgICAgICAgXCJzbXNfY2FwdGNoYVwiOiBzbXNDYXB0Y2hhXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmNvZGUgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXCJmYWlsXCI6IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgd2luZG93Lm1lc3NhZ2VCb3guc2hvd0Vycm9yKFwiU2VydmVyIGludGVybmFsIGVycm9yLlwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcbn07XHJcblxyXG5BdXRoLnByb3RvdHlwZS5saXN0ZW5JbWdDYXB0Y2hhRXZlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgaW1nQ2FwdGNoYSA9ICQoJy5pbWctY2FwdGNoYScpO1xyXG4gICAgaW1nQ2FwdGNoYS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaW1nQ2FwdGNoYS5hdHRyKFwic3JjXCIsIFwiL2FjY291bnQvaW1nX2NhcHRjaGEvXCIrXCI/cmFuZG9tPVwiK01hdGgucmFuZG9tKCkpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5BdXRoLnByb3RvdHlwZS5zbXNTdWNjZXNzRXZlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBtZXNzYWdlQm94LnNob3dTdWNjZXNzKCfnn63kv6Hpqozor4HnoIHlj5HpgIHmiJDlip8nKTtcclxuICAgIHNlbGYuc21zQ2FwdGNoYS5hZGRDbGFzcygnZGlzYWJsZWQnKTsgICAgLy8g5bCG5Y+R6YCB6aqM6K+B56CB5oyJ6ZKu5Y+Y5oiQ54Gw6ImyXHJcbiAgICB2YXIgY291bnQgPSAzMDsgICAgIC8vIDYw56eS5YCS6K6h5pe2XHJcbiAgICBzZWxmLnNtc0NhcHRjaGEudW5iaW5kKCdjbGljaycpOyAgICAgLy8g5Y+W5raI5oyJ6ZKu54K55Ye7XHJcbiAgICB2YXIgdGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VsZi5zbXNDYXB0Y2hhLnRleHQoY291bnQgKyBcInNcIik7ICAgICAvLyDmmL7npLrlgJLorqHml7ZcclxuICAgICAgICBjb3VudC0tOyAgICAvLyDlgJLorqHml7boh6rlh48xXHJcbiAgICAgICAgaWYgKGNvdW50IDw9IDApIHtcclxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7ICAgLy/lgJLorqHml7Y2MOenkue7k+adn++8jOWBnOatouWAkuiuoeaXtlxyXG4gICAgICAgICAgICBzZWxmLnNtc0NhcHRjaGEucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7ICAgICAvLyDlsIblj5HpgIHmjInpkq7lj5jlm57mraPluLjmmL7npLpcclxuICAgICAgICAgICAgc2VsZi5zbXNDYXB0Y2hhLnRleHQoJ+WPkemAgemqjOivgeeggScpOyAgIC8vIOaMiemSruaWh+Wtl+WPmOWbnuato+W4uOaYvuekulxyXG4gICAgICAgICAgICBzZWxmLmxpc3RlblNtc0NhcHRjaGFFdmVudCgpOyAgIC8vIOmHjeaWsOaJp+ihjOWHveaVsFxyXG4gICAgICAgIH1cclxuICAgIH0sIDEwMDApOyAgIC8vIOWAkuiuoeaXtumXtOmalDEwMDDmr6vnp5JcclxufTtcclxuXHJcbkF1dGgucHJvdG90eXBlLmxpc3RlblNtc0NhcHRjaGFFdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHZhciBzbXNDYXB0Y2hhID0gJChcIi5zbXMtY2FwdGNoYS1idG5cIik7XHJcbiAgICB2YXIgdGVsZXBob25lSW5wdXQgPSAkKFwiLnNpZ251cC1ncm91cCBpbnB1dFtuYW1lPSd0ZWxlcGhvbmUnXVwiKTtcclxuICAgIHNtc0NhcHRjaGEuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0ZWxlcGhvbmUgPSB0ZWxlcGhvbmVJbnB1dC52YWwoKTtcclxuICAgICAgICBpZiAoIXRlbGVwaG9uZSkge1xyXG4gICAgICAgICAgICBtZXNzYWdlQm94LnNob3dJbmZvKCdQbGVhc2UgdHlwZSBhIHRlbGVwaG9uZSBudW1iZXIuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHhmemFqYXguZ2V0KHtcclxuICAgICAgICAgICAgJ3VybCc6ICcvYWNjb3VudC9zbXNfY2FwdGNoYS8nLFxyXG4gICAgICAgICAgICAnZGF0YSc6IHtcclxuICAgICAgICAgICAgICAgICd0ZWxlcGhvbmUnIDogdGVsZXBob25lXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICdzdWNjZXNzJzogZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdFsnY29kZSddID09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc21zU3VjY2Vzc0V2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICdmYWlsJzogZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG4kKGZ1bmN0aW9uICgpIHtcclxuICAgdmFyIGF1dGggPSBuZXcgQXV0aCgpO1xyXG4gICBhdXRoLnJ1bigpO1xyXG59KTtcclxuXHJcblxyXG4kKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBmcm9udEJhc2UgPSBuZXcgRnJvbnRCYXNlKCk7XHJcbiAgICBmcm9udEJhc2UucnVuKCk7XHJcbn0pO1xyXG5cclxuLy8gdmFyIHN1Ym1pdEJ0biA9IHNpZ25pbkdyb3VwLmZpbmQoXCIuc3VibWl0LWJ0blwiKTtcclxuLy8gc3VibWl0QnRuLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4vLyAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuLy8gICAgIHZhciB0ZWxlcGhvbmUgPSB0ZWxlcGhvbmVJbnB1dC52YWwoKTtcclxuLy8gICAgIHZhciBwYXNzd29yZCA9IHBhc3N3b3JkSW5wdXQudmFsKCk7XHJcbi8vICAgICB2YXIgcmVtZW1iZXIgPSByZW1lbWJlcklucHV0LnByb3AoXCJjaGVja2VkXCIpO1xyXG4vL1xyXG4vLyAgICAgbXlhamF4LnBvc3Qoe1xyXG4vLyAgICAgICAgICd1cmwnOiAnL2FjY291bnQvbG9naW4vJyxcclxuLy8gICAgICAgICAnZGF0YSc6IHtcclxuLy8gICAgICAgICAgICAgJ3RlbGVwaG9uZSc6IHRlbGVwaG9uZSxcclxuLy8gICAgICAgICAgICAgJ3Bhc3N3b3JkJzogcGFzc3dvcmQsXHJcbi8vICAgICAgICAgICAgICdyZW1lbWJlcic6IHJlbWVtYmVyPzE6MFxyXG4vLyAgICAgICAgIH0sXHJcbi8vICAgICAgICAgJ3N1Y2Nlc3MnOiBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKCc9PT09PT09PT09PT09PScpO1xyXG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xyXG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZygnPT09PT09PT09PT09PT0nKTtcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgICAgICdmYWlsJzogZnVuY3Rpb24gKGVycm9yKSB7XHJcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9KTtcclxuLy8gfSk7XHJcblxyXG5cclxuIl19
